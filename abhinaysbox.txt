************************dfs********************

def dfs(graph, vertex, visited):
    result.append(vertex)
    visited.add(vertex)
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

result = []
graph = {'A': ['B', 'D'], 'B': ['C'], 'C': [], 'D': ['J'], 'J': []}
dfs(graph, 'A', set())
print('->'.join(result))


************************bfs*********************

from collections import deque

def bfs(graph, vertex, visited):
    queue = deque()
    queue.append(vertex)
    visited.add(vertex)
    
    while queue:
        vertex = queue.popleft()
        result.append(vertex)
        for neighbor in graph[vertex]:
            if neighbor not in visited:
                queue.append(neighbor)
                visited.add(neighbor)

result = []
graph = {'S': ['A', 'B', 'D'], 'A': ['B', 'G1'], 'B': ['A', 'C'], 'C':['S','G2','F'], 'D':['S', 'C', 'E'], 'E': ['G3'], 'F': ['D', 'G3'], 'G1': [], 'G2': [], 'G3': []}
bfs(graph, 'S', set())
print('->'.join(result))

******************dfid**********************

def dfs(start, depth, path, visited):
    path.append(start)
    visited.add(start)
    
    if start == goal:
        return True, path
    
    if depth == 0:
        return False, None
    
    for neighbor, cost in graph[start].items():
        if neighbor not in visited:
            found, new_path = dfs(neighbor, depth - 1, path, visited)
            if found:
                return True, new_path
    
    path.pop()
    visited.remove(start)
    
    return False, None

def dfid(start):
    depth = 0
    
    while True:
        path = []
        visited = set()
        
        found, new_path = dfs(start, depth, path, visited)
        if found:
            cost = sum(graph[new_path[i]][new_path[i+1]] for i in range(len(new_path)-1))
            return new_path, cost
        
        depth += 1
        
        print('='*50)
        print('Depth:', depth)
        print('Open List:', path)
        print('Closed List:', visited)

graph = {
    'A': {'B': 9, 'C': 4},
    'B': {'C': 2, 'D':7, 'E':3},
    'C': {'D': 1, 'E':6},
    'D': {'E': 4,'F':8},
    'E': {'F':2},
    'F': {}

}
start_node, goal = 'A', 'F'
path, cost = dfid(start_node)
print('+'*50)
print('Path:', path)
print('Cost:', cost)

**********************dfid************************
tree = {'A': {
    'B': {
        'D': None,
        'E': None
    },
    'C': {
        'F': None,
        'G': None
    }
}}
q = list(tree.keys())
print(q)

goal = 'G'

def dfid(tree: dict, goal, current_depth, max_depth):
    q = list(tree.keys())
    #print(q)
    for node in q:
        print(node, "-> ", end="")
        if node == goal:
            print("Found")
            return True

        if tree[node]!=None and current_depth<max_depth and dfid(tree[node].copy(), goal, current_depth+1, max_depth):
            return True
    return False

found = False
for i in range(0,4):
    print(f"Searching at depth {i} : ")
    found = dfid(tree, goal, 0, i)
    if found:
        break

*************************ucs*************************
from queue import PriorityQueue

def ucs(start, goal):
    open_list = PriorityQueue()
    open_list.put((0, start))

    closed_list = {}

    print('='*50)
    print('Open List:', [(node, cost) for (cost, node) in list(open_list.queue)])
    print('Closed List:', closed_list)

    cost = {start: 0}
    parent = {start: None}

    while not open_list.empty():
        current_cost, current_node = open_list.get()

        closed_list[current_node] = current_cost

        if current_node == goal:
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = parent[current_node]
            path.reverse()
            return path, cost[goal]

        for neighbor, neighbor_cost in graph[current_node].items():
            tentative_cost = current_cost + neighbor_cost

            if neighbor in closed_list:
                continue

            if neighbor in cost and tentative_cost >= cost[neighbor]:
                continue

            open_list.put((tentative_cost, neighbor))

            cost[neighbor] = tentative_cost
            parent[neighbor] = current_node

        print('='*50)
        print('Open List:', [(node, cost) for (cost, node) in list(open_list.queue)])
        print('Closed List:', closed_list)

    return None


graph = {
    'A': {'B': 9, 'C': 4},
    'B': {'C': 2, 'D': 7, 'E': 3},
    'C': {'D': 1, 'E': 6},
    'D': {'E': 4, 'F': 8},
    'E': {'F': 2},
    'F': {}
}

path, cost = ucs('A', 'F')
print('Path:', path)
print('Cost:', cost)

***********************ucs*********************************
class UCS:

  def __init__(self, graph, start_position, target):
    self.graph = graph
    self.start = graph.find_node(start_position)
    self.target = graph.find_node(target)
    self.opened = []
    self.closed = []
    self.number_of_steps = 0


  def calculate_distance(self, parent, child):
    for neighbor in parent.neighbors:
      if neighbor[0] == child:
        distance = parent.heuristic_value + neighbor[1]
        if distance < child.heuristic_value:
          child.parent = parent
          return distance
        
        return child.heuristic_value

  
  def insert_to_list(self, list_category, node):
    if list_category == "open":
      self.opened.append(node)
    else:
      self.closed.append(node)
  

  def remove_from_opened(self):
    self.opened.sort()
    # for n in self.opened:
    #   print(f"({n},{n.heuristic_value})", end = " ")
    # print("\n")
    node = self.opened.pop(0)
    self.closed.append(node)
    return node


  def opened_is_empty(self):
    return len(self.opened) == 0


  def get_old_node(self, node_value):
    for node in self.opened:
      if node.value == node_value:
        return node
    return None 
      

  def calculate_path(self, target_node):
    path = [target_node.value]
    node = target_node.parent
    while True:
      path.append(node.value)
      if node.parent is None:
        break
      node = node.parent
    path.reverse()
    return path
  
  
  def search(self):
    # The heuristic value of the starting node is zero
    self.start.heuristic_value = 0
    # Add the starting point to opened list
    self.opened.append(self.start)

    while True:
      self.number_of_steps += 1

      if self.opened_is_empty():
        print(f"No Solution Found after {self.number_of_steps} steps!!!")
        break
        
      selected_node = self.remove_from_opened()
      # print(f"Selected Node {selected_node}")
      # check if the selected_node is the solution
      if selected_node == self.target:
        path = self.calculate_path(selected_node)
        return path, self.number_of_steps

      # extend the node
      new_nodes = selected_node.extend_node()

      # add the extended nodes in the list opened
      if len(new_nodes) > 0:
        for new_node in new_nodes:
          
          new_node.heuristic_value = self.calculate_distance(selected_node, new_node)
          if new_node not in self.closed and new_node not in self.opened:
            self.insert_to_list("open", new_node)
          elif new_node in self.opened and new_node.parent != selected_node:
            old_node = self.get_old_node(new_node.value)
            if new_node.heuristic_value < old_node.heuristic_value:
              new_node.parent = selected_node
              self.insert_to_opened(new_node)

from cmath import inf


class Node:
    def __init__(self, value, neighbors=None):
        self.value = value
        self.heuristic_value = inf
        if neighbors is None:
            self.neighbors = []
        else:
            self.neighbors = neighbors
        self.parent = None


    def has_neighbors(self):
        if len(self.neighbors) == 0:
            return False
        return True


    def number_of_neighbors(self):
        return len(self.neighbors)

    def add_neighboor(self, neighboor):
        self.neighbors.append(neighboor)
    

    def extend_node(self):
        children = []
        for child in self.neighbors:
            children.append(child[0])
        return children
    

    def __gt__(self, other):
        if isinstance(other, Node):
            if self.heuristic_value > other.heuristic_value:
                return True
            if self.heuristic_value < other.heuristic_value:
                return False
            return self.value > other.value
            

    def __eq__(self, other):
        if isinstance(other, Node):
            return self.value == other.value
        return self.value == other


    def __str__(self):
        return self.value
        

class Graph:
    def __init__(self, nodes=None):
        if nodes is None:
            self.nodes = []
        else:
            self.nodes = nodes


    def add_node(self, node):
        self.nodes.append(node)


    def find_node(self, value):
        for node in self.nodes:
            if node.value == value:
                return node 
        return None


    def add_edge(self, value1, value2, weight=1):
        node1 = self.find_node(value1)        
        node2 = self.find_node(value2)

        if (node1 is not None) and (node2 is not None):
            node1.add_neighboor((node2, weight))
            node2.add_neighboor((node1, weight))
        else:
            print("Error: One or more nodes were not found")


    def number_of_nodes(self):
        return f"The graph has {len(self.nodes)} nodes"


    def are_connected(self, node_one, node_two):
        node_one = self.find_node(node_one)
        node_two = self.find_node(node_two)

        for neighboor in node_one.neighbors:
            if neighboor[0].value == node_two.value:
                return True
        return False


    def __str__(self):
        graph = ""
        for node in self.nodes:
            graph += f"{node.__str__()}\n" 
        return graph
    
def run():
    graph = Graph()
    graph.add_node(Node('V1'))
    graph.add_node(Node('V2'))
    graph.add_node(Node('V3'))
    graph.add_node(Node('V4'))
    graph.add_node(Node('V5'))
    graph.add_node(Node('V6'))
    
    graph.add_edge('V1', 'V2', 9)
    graph.add_edge('V1', 'V3', 4)
    graph.add_edge('V2', 'V3', 2)
    graph.add_edge('V2', 'V4', 7)
    graph.add_edge('V2', 'V5', 3)
    graph.add_edge('V3', 'V4', 1)
    graph.add_edge('V3', 'V5', 6)
    graph.add_edge('V4', 'V5', 4)
    graph.add_edge('V4', 'V6', 8)
    graph.add_edge('V5', 'V6', 2)

    alg = UCS(graph, "V1", "V6")
    path, path_length = alg.search()
    print(" -> ".join(path))
    print(f"Length of the path: {path_length}")

if __name__ == '__main__':
  run()


*******************************astar************************

from queue import PriorityQueue
graph = {
    'A': {'B': 5, 'C': 10},
    'B': {'D': 5},
    'C': {'D': 10},
    'D': {'E': 5},
    'E': {}
}

heuristic = {
    'A': 20,
    'B': 15,
    'C': 10,
    'D': 5,
    'E': 0
}

def a_star(start, goal):
    open_list = PriorityQueue()
    open_list.put((0 + heuristic[start], start, 0))
    
    closed_list = {}
    
    cost = {start: 0}
    parent = {start: None}

    print('='*50)
    print('Open List:', list(open_list.queue))
    print('Closed List:', closed_list)
    print('Cost:', cost)
    print('Parent:', parent)
    
    while not open_list.empty():
        current_f, current_node, current_cost = open_list.get()
        
        closed_list[current_node] = (current_cost, heuristic[current_node])
        
        if current_node == goal:
            path = []
            while current_node is not None:
                path.append(current_node)
                current_node = parent[current_node]
            path.reverse()
            return path, cost[goal]
        
        for neighbor, neighbor_cost in graph[current_node].items():
            tentative_cost = current_cost + neighbor_cost
            
            if neighbor in closed_list:
                continue
            
            if neighbor in cost and tentative_cost >= cost[neighbor]:
                continue
            
            open_list.put((tentative_cost + heuristic[neighbor], neighbor, tentative_cost))
            
            cost[neighbor] = tentative_cost
            parent[neighbor] = current_node
        
        print('='*50)
        print('Open List:', list(open_list.queue))
        print('Closed List:', closed_list)
        print('Cost:', cost)
        print('Parent:', parent)
    
    return None

start_node = 'A'
goal_node = 'E'
path, cost = a_star(start_node, goal_node)
print('+'*50)
print('Path:', path)
print('Cost:', cost)

***********************************hill climb**********************
import numpy as np


def find_neighbours(state, landscape):
    neighbours = []
    dim = landscape.shape

    # left neighbour
    if state[0] != 0:
        neighbours.append((state[0] - 1, state[1]))

    # right neighbour
    if state[0] != dim[0] - 1:
        neighbours.append((state[0] + 1, state[1]))

    # top neighbour
    if state[1] != 0:
        neighbours.append((state[0], state[1] - 1))

    # bottom neighbour
    if state[1] != dim[1] - 1:
        neighbours.append((state[0], state[1] + 1))

    # top left
    if state[0] != 0 and state[1] != 0:
        neighbours.append((state[0] - 1, state[1] - 1))

    # bottom left
    if state[0] != 0 and state[1] != dim[1] - 1:
        neighbours.append((state[0] - 1, state[1] + 1))

    # top right
    if state[0] != dim[0] - 1 and state[1] != 0:
        neighbours.append((state[0] + 1, state[1] - 1))

    # bottom right
    if state[0] != dim[0] - 1 and state[1] != dim[1] - 1:
        neighbours.append((state[0] + 1, state[1] + 1))

    return neighbours


# Current optimization objective: local/global maximum
def hill_climb(curr_state, landscape):
    neighbours = find_neighbours(curr_state, landscape)
    bool
    ascended = False
    next_state = curr_state
    for neighbour in neighbours:  # Find the neighbour with the greatest value
        if landscape[neighbour[0]][neighbour[1]] > landscape[next_state[0]][next_state[1]]:
            next_state = neighbour
            ascended = True

    return ascended, next_state


def __main__():
    landscape = np.random.randint(1, high=50, size=(10, 10))
    print(landscape)
    start_state = (3, 6)  # matrix index coordinates
    current_state = start_state
    count = 1
    ascending = True
    while ascending:
        print("\nStep #", count)
        print("Current state coordinates: ", current_state)
        print("Current state value: ",
              landscape[current_state[0]][current_state[1]])
        count += 1
        ascending, current_state = hill_climb(current_state, landscape)

    print("\nStep #", count)
    print("Optimization objective reached.")
    print("Final state coordinates: ", current_state)
    print("Final state value: ", landscape[current_state[0]][current_state[1]])


__main__()


*************************simulated a **********************************

import random
import math

# Define the objective function


def objective_function(x):
    return x**2

# Define the simulated annealing algorithm function


def simulated_annealing(initial_state, objective_function, max_iterations, max_temperature):
    current_state = initial_state
    current_energy = objective_function(current_state)
    best_state = current_state
    best_energy = current_energy
    temperature = max_temperature

    for i in range(max_iterations):
        # Calculate the acceptance probability
        temperature = temperature * 0.9
        neighbor = current_state + random.uniform(-1, 1)
        neighbor_energy = objective_function(neighbor)
        delta_energy = neighbor_energy - current_energy
        acceptance_probability = math.exp(-delta_energy / temperature)

        # Determine whether to accept the new state
        if delta_energy < 0:
            current_state = neighbor
            current_energy = neighbor_energy
            if current_energy < best_energy:
                best_state = current_state
                best_energy = current_energy
        elif random.uniform(0, 1) < acceptance_probability:
            current_state = neighbor
            current_energy = neighbor_energy

        # Print the current state, energy, and temperature
        print(
            f"Iteration {i}: State = {current_state}, Energy = {current_energy}, Temperature = {temperature}")

    return best_state, best_energy


# Test the algorithm
initial_state = 10
max_iterations = 100
max_temperature = 1000
best_state, best_energy = simulated_annealing(
    initial_state, objective_function, max_iterations, max_temperature)

print(f"\nBest state found: {best_state}")
print(f"Best energy found: {best_energy}")


*********************************genetic***********************************

import random

# Define the fitness function to evaluate the individuals


def fitness(individual):
    # In this example, the fitness function simply counts the number of 1s in the binary string
    return sum(individual)

# Define the genetic algorithm function


def genetic_algorithm(population_size, chromosome_size, generations, mutation_rate):
    # Initialize the population with random individuals
    population = [[random.randint(0, 1) for j in range(
        chromosome_size)] for i in range(population_size)]
    for generation in range(generations):
        # Evaluate the fitness of each individual in the population
        fitness_scores = [fitness(individual) for individual in population]
        # Select the best individuals to be the parents of the next generation
        parents = []
        for i in range(population_size // 2):
            parent1 = population[fitness_scores.index(max(fitness_scores))]
            fitness_scores[fitness_scores.index(max(fitness_scores))] = -1
            parent2 = population[fitness_scores.index(max(fitness_scores))]
            fitness_scores[fitness_scores.index(max(fitness_scores))] = -1
            parents.append((parent1, parent2))
        # Create the next generation by recombining the parents' chromosomes and mutating them
        population = []
        for parent1, parent2 in parents:
            child1, child2 = parent1[:], parent2[:]
            for i in range(chromosome_size):
                if random.random() < mutation_rate:
                    child1[i] = 1 - child1[i]
                if random.random() < mutation_rate:
                    child2[i] = 1 - child2[i]
            population.append(child1)
            population.append(child2)
    # Return the fittest individual from the final population
    fitness_scores = [fitness(individual) for individual in population]
    return population[fitness_scores.index(max(fitness_scores))]


# Example usage:
fittest_individual = genetic_algorithm(
    population_size=100, chromosome_size=10, generations=50, mutation_rate=0.01)
print("Fittest individual:", fittest_individual)
